#!/bin/bash

	# v1.0 --(20180720) add first program
	# v1.1 --(20180723) create functions
	# v1.2 --(20180812) fix bugs and add play_in_dir function

######################################################
#                  Music_Finder V1.2                 #
#  https://github.com/hessamashari/music-finder.git  #
######################################################

	# author : Hessam Ashari
	# github : https://github.com/hessamashari/video-tool
	# Email  : hessam.ashari@gmail.com

normal="$(printf '\033[0m')"          # text mode
# Colors
red="$(printf '\033[0;31m')"  		  # red
green="$(printf '\033[0;32m')"        # green
orange="$(printf '\033[0;33m')"       # orange
blue="$(printf '\033[0;34m')"         # blue
white="$(printf '\033[0;37m')"        # white

# ----------\Play musics in list of directories function\----------
function play_in_dir() {
	local directories="$1"

	# Play music in serched directory
	for dirName in $directories; do
		if cd "$dirName" &> /dev/null; then
			echo -e "\n"
			read -p "${green} Do you want to play musics in ${orange}'$dirName'${normal}? [Y/n] " playInDirectory
			if [[ "$playInDirectory" == "" || "$playInDirectory" == "Y" || "$playInDirectory" == "y" ]]; then
				mplayer $dirName/*
			elif [[ "$playInDirectory" == "N" || "$playInDirectory" == "n" ]]; then
				continue
			else
				echo -e "${red}Invalid argument!${normal}"
				continue
			fi
		# For directories witch has root owner
		elif sudo su -c "cd '$dirName'" &> /dev/null; then
			sudo mplayer $dirName/*
		else
			echo -e "\n"
			echo -e "${red}Cannot cd to directory ${orange}'$dirName'${normal}"
			exit 1
		fi
	done
}

# ----------\Find music function\----------
function find_function() {
	local inputDir="$1"

	read -p "Please enter the name of music wich you search : " name
	read -p "Please Select your type d {directory} f {file} : " selectedType

	echo -e "\n"
	if [[ "$selectedType" == "D" || "$selectedType" == "d" ]]; then
		# Search directory
		if [[ "$inputDir" == "/" ]]; then
			sudo find "$inputDir" -type d -iname "$name"
			local searchDir=$(sudo find "$inputDir" -type d -iname "$name")

			play_in_dir "$searchDir"
		else
			find "$inputDir" -type d -iname "$name"
			local searchDir=$(find "$inputDir" -type d -iname "$name")

			play_in_dir "$searchDir"
		fi

	elif [[ "$selectedType" == "F" || "$selectedType" == "f" ]]; then
		echo -e "${orange}Install the mplayer if you want to play music after find it${normal}"
		# Search and play music with Mplayer
		if [[ "$inputDir" == "/" ]]; then
			sudo find "$inputDir" -type f -iname "*$name*" -exec mplayer {} \;
		else
			find "$inputDir" -type f -iname "*$name*" -exec mplayer {} \;
		fi
		# Question to play another music
		read -p "${green}Do you want to play another? [Y/n] ${normal}" playAnotherMusic

		if [[ "$playAnotherMusic" == "" || "$playAnotherMusic" == "Y" || "$playAnotherMusic" == "y" ]]; then
			choose_dir
		elif [[ "$playAnotherMusic" == "N" || "$playAnotherMusic" == "n" ]]; then
			return
		else
			echo -e "${red}Invalid argument!${normal}"
			exit 1
		fi
	else
		echo -e "${red}Your type is not true!${normal}"
		exit 1
	fi
}

# ----------\Select directory function\----------
function choose_dir() {
	clear

	echo -e "${green}-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/${normal}"
	echo -e "${orange}Please Select your path ${normal}"

	read -p "Do you like to serach all of your system (Requires root access)? [Y/n] " searchAllSystem

	if [[ "$searchAllSystem" == "" || "$searchAllSystem" == "y" || "$searchAllSystem" == "Y" ]]; then
		# Search all of file system
	    echo -e "${green}-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/${normal}"
	    echo -e "This operation may take a while!"

		find_function "/"
	elif [[ "$searchAllSystem" == "n" || "$searchAllSystem" == "N" ]]; then
		read -p "Do you like search this directory? [Y/n] " workingDirectory

		if [[ "$workingDirectory" == "" || "$workingDirectory" == "y" || "$workingDirectory" == "Y" ]]; then
			# Search current directory
		    echo -e "${green}-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/${normal}"

			find_function "$PWD"
		elif [[ "$workingDirectory" == "n" || "$workingDirectory" == "N" ]]; then
			# Search entered path
			read -p "Enter a directory : " -i "" -e userEnteredPath
			echo -e "${green}-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/${normal}"
				if [[ "$userEnteredPath" == "/" ]]; then
					echo -e "${red}You have to chose first option :)${normal}"
				else
					find_function "$userEnteredPath"
				fi
		else
			echo -e "${red}Invalid argument!${normal}"
			exit 1
		fi
	else
	    echo -e "${red}Invalid argument!${normal}"
		exit 1
	fi
	echo -e "\n"
	echo -e "${green}done!${normal}"
}

# ----------\Uninstall function\----------
function uninstall() {
	clear

	read -p "${red}Are you sure to uninstall music-finder??!! [y/N] ${normal}" deletMusicFinder

	# Remove dependencies
	if [[ "$deletMusicFinder" == "y" || "$deletMusicFinder" == "Y" ]]; then
		deleteDependencies="0"
		# Checking if the distro is DebianBase / ArchBase / RedHatBase / SuseBase and running the correct command

		if pacman -Q &> /dev/null; then # Check Arch
			sudo pacman -Rs mplayer
			# Check user's entered password
			if [[ "$?" == "1" ]]; then
				deleteDependencies="1"
			fi
		elif apt list --installed &> /dev/null; then # Check Debian
			sudo apt remove mplayer
			# Check user's entered password
			if [[ "$?" == "1" ]]; then
				deleteDependencies="1"
			fi
		elif dnf list &> /dev/null; then # Check Fedora
			sudo dnf remove mplayer
			# Check user's entered password
			if [[ "$?" == "1" ]]; then
				deleteDependencies="1"
			fi
		elif zypper search i+ &> /dev/null; then # Check openSUSE
			sudo zypper remove mplayer
			# Check user's entered password
			if [[ "$?" == "1" ]]; then
				deleteDependencies="1"
			fi
		else
			echo -e "${red}Your distro is neither ArchBase or DebianBase or RedHatBase or SuseBase So,
			 The script is not going to work in your distro and you have uninstall the dependencies manually.${normal}"
			deleteDependencies="1"
		fi

		# Removing Music-finder Command
		if [[ "$deleteDependencies" == "0" ]]; then
			sudo rm -f /usr/bin/music-finder
			if [[ "$?" == "0" ]]; then
				echo -e "\n"
				echo -e "${red}music-finder succesfully uninstalled :( ${normal}"
			else
				echo -e "\n"
				echo -e "${green}music-finder doesn't uninstall succesfully :) ${normal}"
				exit 1
			fi
		else
			echo -e "\n"
			echo -e "${green}music-finder doesn't uninstall succesfully :) ${normal}"
			exit 1
		fi
	elif [[ "$deletMusicFinder" == "" || "$deletMusicFinder" == "n" || "$deletMusicFinder" == "N" ]]; then
		echo -e "\n"
		echo -e "${green}music-finder is still installed :) ${normal}"
		return
	else
		echo -e "${red}Invalid argument! ${normal}"
		exit 1
	fi
}

# ----------\Update function\----------
function update() {
	clear

	# Check place of repo for existing files
	if [[ -d /tmp/music-finder/ ]]; then
		sudo rm -rf /tmp/music-finder/
	fi

	# Check access of /tmp
	if cd /tmp/ &> /dev/null; then
		git clone https://github.com/hessamashari/music-finder.git /tmp/music-finder
		sleep 2
		echo -e "\n"
		# Check access of /tmp/music-finder
		if cd /tmp/music-finder/ &> /dev/null; then
			# Replace older program with newer
			sudo cp /tmp/music-finder/music-finder /usr/bin/music-finder
			sudo chmod 755 /usr/bin/music-finder
			echo -e "\n"
			# Check operation
			if [[ "$?" == "0" ]]; then
				echo -e " ${green}Music_Finder updated succesfully! ${normal}"
			else
				echo -e " ${red}Music_Finder doesn't update succesfully! ${normal}"
				exit 1
			fi
		else
			echo -e "\n"
			echo -e "${red}Cannot cd to directory ${orange}'/tmp/music-finder'${normal}"
			exit 1
		fi
	else
		echo -e "\n"
		echo -e "${red}Cannot cd to directory ${orange}'/tmp'${normal}"
		exit 1
	fi

	# Delet cloned repository
	sudo rm -rf /tmp/music-finder
}

# ----------\Show version function\---------
function show_version() {
	echo -e "\n"
	echo -e "Music_Finder, version v0.4 (x86_64-unknown-linux-gnu)
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

built with bash 4.4.23 (GNU/bash)
"
	return
}

# ----------\Help function\----------
function usage() {
	echo -e "\n"
	echo -e " Usage: music-finder [ -h | --help ],  [ -V | --version ],  [ --uninstall ],   [ -U | --update ]"
	return
}

# ----------\Input options\----------
case "$1" in
    "")    choose_dir    ;;
    "--update" | "-U")    update    ;;
	"--uninstall")    uninstall    ;;
	"--help" | "-h")    usage    ;;
	"--version" | "-V")    show_version    ;;
	*)    usage    ;;
esac;
exit 0
